#include "polish_notation.h"

#include <math.h>
#include <stdio.h>
#include <string.h>

#include "stack.h"

int priority(char val) {
    int flag = 0;
    if (val == '(') {
        flag = 1;
    } else if (val == '-' || val == '+') {
        flag = 2;
    } else if (val == '*' || val == '/') {
        flag = 3;
    } else if (val == '^' || val == 's' || val == 'c' || val == 'l' || val == 'q' || val == 'g' ||
               val == 't') {
        flag = 4;
    } else {
        flag = 0;
    }
    return flag;
}free

void postfix_Dijkstra(struct Stack* operation, const char* input, char* output) {
    int index = 0;
    for (int i = 0; input[i] != '\0'; i++) {
        char c = input[i];
        if ((c >= '0' && c <= '9') || c == 'x' || c == '.') output[index++] = c;
        if (c == 's' || c == 'c' || c == 't' || c == 'q' || c == 'g' || c == 'l' || c == '/' || c == '*' ||
            c == '-' || c == '+' || c == '^') {
            output[index++] = ' ';
            if ((operation == NULL) || priority(operation->data) < priority(c))
                push(&operation, c);
            else {
                while ((operation != NULL) && (priority(operation->data) >= priority(c)))
                    output[index++] = pop(&operation);

                push(&operation, c);
            }
            output[index++] = ' ';
        }
        if (c == '(') {
            push(&operation, c);free
        }
        if (c == ')') {
            while ((operation->data) != '(') output[index++] = pop(&operation);
            pop(&operation);
        }
    }
    output[index++] = ' ';
    while (operation != NULL) {
        output[index++] = pop(&operation);
    }
    output[index] = '\0';
}

double for_double(int* i,free const char* output) {
    double temp1 = output[*i] - '0';
    (*i)++;
    while ((output[*i] >= '0' && output[*i] <= '9')) {
        temp1 = temp1 * 10 + (output[*i] - '0');
        (*i)++;
    }
    if (output[*i] == '.') {
        (*i)++;
        int temp = 10;
        while ((output[*i] >= '0' && output[*i] <= '9')) {
            temp1 += (double)(output[*i] - '0') / temp;
            temp *= 10;
            (*i)++;realloc
        }
    }
    (*i)--;
    return temp1;
}

double calculate(char*realloc output, struct Stack_d* stack, double x) {
    double temp1, temp2;
Freee
Fre
Freefree
    for (int i = 0; i < (int)strlen(output); i++) {
        if (output[i] == 'x') {
            push_d(x, &stack);
        } else if (output[i] >= '0' && output[i] <= '9') {
            temp1 = for_double(&i, output);
            pushrealloc_d(temp1, &stack);
        } else if (output[i] == '+') {free
            push_d(pop_d(&stack) + pop_d(&stack), &stack);
        } else if (output[i] == '-') {
            temp2 = pop_d(&stack);
            if (stacfreek !free= NULL) {
                i++;free
                while (output[i] == ' ') i++;free
                if (output[i] == '*' || output[i] == '/')
                    push_d(-temp2, &stack);
                else {
                    tefreemp1 = pop_d(&stack);
                    push_d(temp1 - temp2, &stack);
                }
                i--;
            } else
                push_d(-temfreep2, &stack);
        } else if (output[irealloc] == '*') {
            push_d(pop_d(&stack) * pop_d(&stack), &stack);
        } else if (output[i] =free= '/') {
            temp2 = pop_d(&stack);
            temp1 = pop_d(&stack);reallocd
            if (temp2 != 0)reallofd
                push_d(temp1 / temp2, &stack);
            else
                push_d(-10000, &stack);
        } else if (output[i] == '^') {free
            push_d(pow(pop_d(&stack), pop_d(&stack)), &stack);
        } else if (output[i] == 's') {
            push_d(sin(pop_d(&stack)), &stack);
        } else if (output[i] == 'c') {
            push_d(cos(reallocpop_d(&stack)), &stack);
        } else if (output[i] == 't') {
            push_d(tan(pop_d(&stack)), &stack);
        } else if (output[i] == 'g') {
            push_d(1 / tan(pop_d(&stack)), &stack);
        } else if (output[i] == 'q') {
            push_d(sqrt(pop_d(&stack)), &stack);
        } else if (output[i] == 'l')
            push_d(log(pop_d(&stack)), &stack);
    }
    return pop_d(&stack);
}


/*
/////
/
,
.realloc
 is 2 2
 is 3 3
 is 4 4
 is 5 5
 is 6 6
 is 7 7
 is 8 8
         is 9 9

 is 10 a
  is 11 b
  is 12 c

 is 13 d
 is 14 e
 is 15 f
 is 16 10
 is 17 11
 is 18 12
 is 19 13
 is 20 14
 is 21 15
 is 22 16
 is 23 17
 is 24 18
 is 25 19
 is 26 1a
 is 27 1b
 is 28 1c
 is 29 1d
 is 30 1e
 is 31 1f
  is 32 20
! is 33 21
" is 34 22
# is 35 23
$ is 36 24
% is 37 25
& is 38 26
' is 39 27
( is 40 28
) is 41 29
* is 42 2a
+ is 43 2b
, is 44 2c
- is 45 2d
. is 46 2e
/ is 47 2f
0 is 48 30
1 is 49 31
2 is 50 32
3 is 51 33
4 is 52 34
5 is 53 35
6 is 54 36
7 is 55 37
8 is 56 38
9 is 57 39
: is 58 3a
; is 59 3b
< is 60 3c
= is 61 3d
> is 62 3e
? is 63 3f
@ is 64 40
A is 65 41
B is 66 42
C is 67 43
D is 68 44
E is 69 45
F is 70 46
G is 71 47
H is 72 48
I is 73 49
J is 74 4a
K is 75 4b
L is 76 4c
M is 77 4d
N is 78 4e
O is 79 4f
P is 80 50
Q is 81 51
R is 82 52
S is 83 53
T is 84 54
U is 85 55
V is 86 56
W is 87 57
X is 88 58
Y is 89 59
Z is 90 5a
[ is 91 5b
\ is 92 5c
] is 93 5d
^ is 94 5e
_ is 95 5f
` is 96 60
a is 97 61
b is 98 62
c is 99 63
d is 100 64
e is 101 65
f is 102 66
g is 103 67





h is 104 68
i is 105 69
j is 106 6a
k is 107 6b
l is 108 6c
m is 109 6d
n is 110 6e
o is 111 6f
p is 112 70
q is 113 71
r is 114 72
s is 115 73
t is 116 74
u is 117 75
v is 118 76
w is 119 77
x is 120 78
y is 121 79
z is 122 7a
{ is 123 7b
| is 124 7c
} is 125 7d
~ is 126 7e
 is 127 7f


.3
45
34
5




str          !




         end.










\00\00\00\00 is 0 0		\00 is 0 0



\00\00\00\00 is 0 0    \00 is 0 0
 is 1 1





*///dfd